NAME: SAI CHOWDARY AMARANENI
DATE: 04/08/16
M20211375

1) Explain the differences between Threads1 and Threads2 using lines from the code and a precise explanation.

The "sharedCounter" in 'threads2.py' acts as global counter which is initially set to zero.(See line 10) 
The counter is updated inside of both threads every time the loop runs.The global counter also shows the order of thread execution.

2) After running Thread3.py does it fix the problems that occured in Threads2.py? What's the down-side?

The locks in 'thread3.py'  does fix the problem of clashing & waiting of threads during execution. 
The negative affect is it took some extra time compared to previous threads.

3) Comment out the join statements at the bottom of the program and describe what happens.

There is switch between threads without the current thread being finished. And also the main program ends during the beginning of the thread A & B 's lifecycle.
 It took several seconds for output after the main program ended

4) What happens if you try to Ctrl-C out of the program before it terminates?

The threads continue to run by holding the IOstream. As the main program has already terminated, control C is not useful. 


5) Read and run Threads4.py. This generates a different and more ridiculous race condition. Write concise explanation of what's happening to cause this bizarre behavior using lines from the code and precise explanation.

Thread A and Thread B have been interrupted during their execution and when global sharedNumber=2 both threads print the same as 
they are constantly being interrupted because of absence of lock

6) Does uncommenting the lock operations clear up the problem in question 5?

Yes,it helped in preventing interrupt
